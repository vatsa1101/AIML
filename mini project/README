For our mini project, we built a movie recommendation system for which we used demographic filtering and content-based filtering technique. Demographic filtering technique uses the demographic data of a user to determine which items may be appropriate for recommendation, while Content-based filtering uses similarities in products, services, or content features, as well as information accumulated about the user to make recommendations. In Content based filtering, we further used 2 different methods to filter out the results. One method was to show recommendations based on the movie cast, directors and genre. To do this we created a single string containing the cast,directors, and genre which was named soup, for all the movies and then found out the cosine similarity between them. Here we found out that the movies which should have low similarity were getting high similarity, the reason for this was because of certain cast members having the same first name or last name or other similar words, It would match the similar name and may result in we getting high similarity so while making the string we ensured that we removed the spaces between names, genres. For eg. names like Chris Evans and Chris Hemsworth have “Chris” in common and there were many such examples. The second method was to show recommendations based on the movie plot. Here we do the similar thing, we vectorize the movie description and then find the cosine similarity. So given the input of the name of the movie, the model would find the movies with high similarity and return the top ten movies with high similarity. In Demographic filtering, we find a score for each movie and then sort them in descending order and display the top ten movies. This score is calculated using the votes a movie has received , average vote count, popularity of the movie and a value ‘m’ which denotes the minimum number of votes a movie requires to be selected to be considered as a recommendation. The variable ‘m’ is important since a movie with 3 votes can have high rating and should not be considered as a high rated movie since it has very few votes and it may not be better than a movie with a lower rated movie with high votes. To correct this we took the value of ‘m’ such that the number of votes for each movie is more than 90% of the movies in the dataset. Only movies which satisfied this value of m were considered and then the score of each movie was calculated. At the end, we came across Streamlit, which we used to create a single page where the user can enter the movie name and get recommendations by clicking on the buttons below the input bar, and the top ten recommendations that are returned are displayed below.
